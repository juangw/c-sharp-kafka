// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen, version 1.7.7.5
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace c_sharp_kafka.Schemas
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using global::Avro;
	using global::Avro.Specific;
	
	public partial class WeatherMessage : ISpecificRecord
	{
		public static Schema _SCHEMA = Schema.Parse(@"{""type"":""record"",""name"":""WeatherMessage"",""namespace"":""c_sharp_kafka.Schemas"",""fields"":[{""name"":""coord"",""type"":{""type"":""record"",""name"":""coord"",""namespace"":""c_sharp_kafka.Schemas"",""fields"":[{""name"":""lon"",""type"":""float""},{""name"":""lat"",""type"":""float""}]}},{""name"":""weather"",""type"":{""type"":""array"",""items"":{""type"":""record"",""name"":""weather_record"",""namespace"":""c_sharp_kafka.Schemas"",""fields"":[{""name"":""id"",""type"":""int""},{""name"":""main"",""type"":""string""},{""name"":""description"",""type"":""string""},{""name"":""icon"",""type"":""string""}]}}},{""name"":""main"",""type"":{""type"":""record"",""name"":""main"",""namespace"":""c_sharp_kafka.Schemas"",""fields"":[{""name"":""temp"",""type"":""float""},{""name"":""feels_like"",""type"":""float""},{""name"":""temp_min"",""type"":""float""},{""name"":""temp_max"",""type"":""float""},{""name"":""pressure"",""type"":""int""},{""name"":""humidity"",""type"":""int""},{""name"":""sea_level"",""type"":""int""},{""name"":""grnd_level"",""type"":""int""}]}},{""name"":""visibility"",""type"":""int""},{""name"":""wind"",""type"":{""type"":""record"",""name"":""wind"",""namespace"":""c_sharp_kafka.Schemas"",""fields"":[{""name"":""speed"",""type"":""float""},{""name"":""deg"",""type"":""int""},{""name"":""gust"",""type"":""float""}]}},{""name"":""clouds"",""type"":{""type"":""record"",""name"":""clouds"",""namespace"":""c_sharp_kafka.Schemas"",""fields"":[{""name"":""all"",""type"":""int""}]}},{""name"":""dt"",""type"":""int""},{""name"":""timezone"",""type"":""int""},{""name"":""id"",""type"":""int""},{""name"":""name"",""type"":""string""}]}");
		private c_sharp_kafka.Schemas.coord _coord;
		private IList<c_sharp_kafka.Schemas.weather_record> _weather;
		private c_sharp_kafka.Schemas.main _main;
		private int _visibility;
		private c_sharp_kafka.Schemas.wind _wind;
		private c_sharp_kafka.Schemas.clouds _clouds;
		private int _dt;
		private int _timezone;
		private int _id;
		private string _name;
		public virtual Schema Schema
		{
			get
			{
				return WeatherMessage._SCHEMA;
			}
		}
		public c_sharp_kafka.Schemas.coord coord
		{
			get
			{
				return this._coord;
			}
			set
			{
				this._coord = value;
			}
		}
		public IList<c_sharp_kafka.Schemas.weather_record> weather
		{
			get
			{
				return this._weather;
			}
			set
			{
				this._weather = value;
			}
		}
		public c_sharp_kafka.Schemas.main main
		{
			get
			{
				return this._main;
			}
			set
			{
				this._main = value;
			}
		}
		public int visibility
		{
			get
			{
				return this._visibility;
			}
			set
			{
				this._visibility = value;
			}
		}
		public c_sharp_kafka.Schemas.wind wind
		{
			get
			{
				return this._wind;
			}
			set
			{
				this._wind = value;
			}
		}
		public c_sharp_kafka.Schemas.clouds clouds
		{
			get
			{
				return this._clouds;
			}
			set
			{
				this._clouds = value;
			}
		}
		public int dt
		{
			get
			{
				return this._dt;
			}
			set
			{
				this._dt = value;
			}
		}
		public int timezone
		{
			get
			{
				return this._timezone;
			}
			set
			{
				this._timezone = value;
			}
		}
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				this._id = value;
			}
		}
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				this._name = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.coord;
			case 1: return this.weather;
			case 2: return this.main;
			case 3: return this.visibility;
			case 4: return this.wind;
			case 5: return this.clouds;
			case 6: return this.dt;
			case 7: return this.timezone;
			case 8: return this.id;
			case 9: return this.name;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.coord = (c_sharp_kafka.Schemas.coord)fieldValue; break;
			case 1: this.weather = (IList<c_sharp_kafka.Schemas.weather_record>)fieldValue; break;
			case 2: this.main = (c_sharp_kafka.Schemas.main)fieldValue; break;
			case 3: this.visibility = (System.Int32)fieldValue; break;
			case 4: this.wind = (c_sharp_kafka.Schemas.wind)fieldValue; break;
			case 5: this.clouds = (c_sharp_kafka.Schemas.clouds)fieldValue; break;
			case 6: this.dt = (System.Int32)fieldValue; break;
			case 7: this.timezone = (System.Int32)fieldValue; break;
			case 8: this.id = (System.Int32)fieldValue; break;
			case 9: this.name = (System.String)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
